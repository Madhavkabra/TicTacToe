{"version":3,"sources":["Components/Board/index.module.css","Components/Square/index.module.css","Components/Row/index.module.css","App.module.css","Utils/boardUtils.js","Components/Square/index.js","Components/Row/index.js","Components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getCurrentBoard","playerOneBoxes","playerTwoBoxes","boxes","players","map","box","includes","player","getWinningBoxes","array","parts","verticalBoxes","horizontalBoxes","rightDiagonal","leftDiagonal","i","verticalChunks","horizontalChunks","j","length","push","Square","handleSquareClick","config","winner","winningBox","disabled","onClick","className","cx","styles","square","xPlayer","oPlayer","Row","rowItems","row","rowItem","initialBoard","currentPlayer","currentBoard","Board","props","refreshBoard","state","board","setState","resetGame","setBoardSize","size","totalSize","Array","keys","boardSize","winningBoxes","newBoxes","checkWin","currentPlayerWon","currentBox","forEach","every","winIndex","this","previousProps","previousState","container","infoWrapper","playerTextWrapper","playerText","optionWrapper","sizeSelect","select","value","onChange","event","Number","target","resetBtn","squareGrid","item","startIndex","endIndex","slice","React","Component","App","app","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfad5f23.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Board_container__3ju8d\",\"squareGrid\":\"Board_squareGrid__Kfkme\",\"playerText\":\"Board_playerText__N6nW5\",\"resetBtn\":\"Board_resetBtn__2w6sz\",\"sizeSelect\":\"Board_sizeSelect__1Czzs\",\"select\":\"Board_select__2hsis\",\"infoWrapper\":\"Board_infoWrapper__osJ0W\",\"optionWrapper\":\"Board_optionWrapper__1xDcf\",\"playerTextWrapper\":\"Board_playerTextWrapper__27tF1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Square_square__2d7Wo\",\"xPlayer\":\"Square_xPlayer__2fmvM\",\"oPlayer\":\"Square_oPlayer__1Pdht\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Row_row__2845r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","export const getCurrentBoard = (playerOneBoxes, playerTwoBoxes, boxes, players) => {\n  return boxes.map(box => {\n    if (playerOneBoxes.includes(box)) {\n      return ({\n        player: players[0],\n        box\n      })\n    }\n    if (playerTwoBoxes.includes(box)) {\n      return ({\n        player: players[1],\n        box\n      })\n    }\n    else {\n      return ({\n        player: null,\n        box\n      })\n    }\n  })\n}\n\nexport const getWinningBoxes = (array, parts) => {\n  let verticalBoxes = [];\n  let horizontalBoxes = [];\n  let rightDiagonal = [];\n  let leftDiagonal = [];\n\n  for (let i = 0; i < parts; i++) {\n    let verticalChunks = [];\n    let horizontalChunks = [];\n    for (let j = 0; j < array.length; j = j + parts) {\n      verticalChunks.push(array[i + j]);\n      horizontalChunks.push(array[(j / parts) + (i * parts)])\n      if (j / parts === i) {\n        rightDiagonal.push(i + j)\n      }\n      if (((array.length - parts) - (i * parts)) === j) {\n        leftDiagonal.push(i + j)\n      }\n    }\n    verticalBoxes.push(verticalChunks);\n    horizontalBoxes.push(horizontalChunks);\n  }\n\n  return [...verticalBoxes, ...horizontalBoxes, rightDiagonal, leftDiagonal];\n}","import React from \"react\";\nimport styles from \"./index.module.css\";\nimport cx from \"classnames\";\n\nconst Square = ({ handleSquareClick, config, winner, winningBox }) => {\n  return (\n    <button\n      disabled={config.player || winner}\n      onClick={() => handleSquareClick(config.box)}\n      className={cx(\n        styles.square,\n        { [styles.xPlayer]: config.player === \"X\" },\n        { [styles.oPlayer]: config.player === \"O\" })}\n    >\n      {config.player || ' '}\n    </button>\n  )\n};\n\nexport default Square","import React from \"react\";\nimport Square from \"../Square\"\nimport styles from \"./index.module.css\";\n\nconst Row = ({ winner, rowItems, handleSquareClick, winningBox }) => {\n  return <div className={styles.row}>\n    {rowItems.map(rowItem =>\n      (\n        <Square winningBox={winningBox} winner={winner} config={rowItem} handleSquareClick={handleSquareClick} />\n      )\n    )}\n  </div>\n}\n\nexport default Row","import React from \"react\";\nimport { getWinningBoxes, getCurrentBoard } from \"../../Utils/boardUtils\";\nimport Row from '../Row'\nimport styles from \"./index.module.css\";\n\nconst players = ['X', 'O']\n\nconst initialBoard = {\n  playerOneBoxes: [],\n  playerTwoBoxes: [],\n  currentPlayer: players[0],\n  currentBoard: [],\n  winner: null,\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super();\n    this.players = players\n    this.state = {\n      totalSize: 3 * 3,\n      boxes: [...Array(9).keys()],\n      winningBoxes: getWinningBoxes([...Array(9).keys()], 3),\n      playerOneBoxes: [],\n      playerTwoBoxes: [],\n      currentPlayer: this.players[0],\n      currentBoard: [],\n      winner: null,\n      winningBox: [],\n      boardSize: 3\n    }\n  }\n\n  componentDidMount() {\n    this.refreshBoard();\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousState.playerOneBoxes !== this.state.playerOneBoxes || previousState.playerTwoBoxes !== this.state.playerTwoBoxes) {\n      const { playerOneBoxes, playerTwoBoxes } = this.state\n      const won = this.checkWin(playerOneBoxes, playerTwoBoxes)\n      if (won) {\n        const board = getCurrentBoard(playerOneBoxes, playerTwoBoxes, this.state.boxes, this.players)\n        const winner = this.state.currentPlayer === this.players[0] ? this.players[1] : this.players[0]\n        this.setState({ ...this.state, winner, currentBoard: board })\n      } else {\n        const board = getCurrentBoard(playerOneBoxes, playerTwoBoxes, this.state.boxes, this.players)\n        this.setState({ ...this.state, currentBoard: board })\n      }\n    }\n  }\n\n  refreshBoard = () => {\n    const { playerOneBoxes, playerTwoBoxes } = this.state\n    const board = getCurrentBoard(playerOneBoxes, playerTwoBoxes, this.state.boxes, this.players)\n    this.setState({ ...this.state, currentBoard: board, winningBox: [] })\n  }\n\n\n  resetGame = () => {\n    this.setState({\n      ...initialBoard\n    }, () => {\n      this.refreshBoard()\n    })\n  }\n\n  setBoardSize = (size) => {\n    const totalSize = size * size;\n    const board = getCurrentBoard([], [], [...Array(totalSize).keys()], this.players)\n    this.setState({\n      ...this.state,\n      boardSize: size,\n      totalSize: totalSize,\n      boxes: [...Array(totalSize).keys()],\n      winningBoxes: getWinningBoxes([...Array(totalSize).keys()], size),\n      currentBoard: board,\n      playerOneBoxes: [],\n      playerTwoBoxes: [],\n      currentPlayer: this.players[0],\n    })\n  }\n\n  handleSquareClick = (box) => {\n    if (this.state.currentPlayer === this.players[0]) {\n      const newBoxes = [box, ...this.state.playerOneBoxes]\n      this.setState({\n        ...this.state,\n        playerOneBoxes: newBoxes,\n        currentPlayer: this.players[1]\n      });\n    }\n    else {\n      const newBoxes = [box, ...this.state.playerTwoBoxes]\n      this.setState({\n        ...this.state,\n        playerTwoBoxes: newBoxes,\n        currentPlayer: this.players[0]\n      });\n    }\n  }\n\n  checkWin = (playerOneBoxes, playerTwoBoxes) => {\n    let currentPlayerWon = false\n\n    // We check moves for opposite palyer since current player has been toggled\n    const currentBox = this.state.currentPlayer === this.players[0] ? playerTwoBoxes : playerOneBoxes\n    if (currentBox.length) {\n      this.state.winningBoxes.forEach(winningBox => {\n        if (winningBox.every(winIndex => currentBox.includes(winIndex))) {\n          this.setState({\n            ...this.state,\n            winningBox: winningBox\n          })\n          currentPlayerWon = true\n        }\n      })\n    }\n    return currentPlayerWon\n  }\n\n  render() {\n    const { currentPlayer, currentBoard, winner } = this.state\n    return (\n      <div className={styles.container}>\n        <div className={styles.infoWrapper}>\n          <div className={styles.playerTextWrapper}>\n            <div className={styles.playerText}>Next Player: {winner ? '-' : currentPlayer}</div>\n            <div className={styles.playerText}>Winner: {winner ? winner : 'None'}</div>\n          </div>\n          <div className={styles.optionWrapper}>\n            <fieldset className={styles.sizeSelect}>\n              <legend>Game size</legend>\n              <select\n                className={styles.select}\n                value={this.state.boardSize}\n                onChange={(event) => this.setBoardSize(Number(event.target.value))}\n              >\n                <option value={2}>2</option>\n                <option value={3}>3</option>\n                <option value={4}>4</option>\n                <option value={5}>5</option>\n                <option value={6}>6</option>\n                <option value={7}>7</option>\n                <option value={8}>8</option>\n                <option value={9}>9</option>\n              </select>\n            </fieldset>\n            <button className={styles.resetBtn} onClick={this.resetGame}>Reset Game</button>\n          </div>\n        </div>\n        <div className={styles.squareGrid}>\n          {\n            [...Array(this.state.boardSize).keys()].map(item => {\n              const startIndex = item * this.state.boardSize;\n              const endIndex = startIndex + this.state.boardSize;\n              return (\n                <Row\n                  winningBox={this.state.winningBox}\n                  winner={winner}\n                  handleSquareClick={this.handleSquareClick}\n                  rowItems={currentBoard.slice(startIndex, endIndex)}\n                />)\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board","import React from \"react\";\nimport Board from './Components/Board'\nimport styles from \"./App.module.css\";\n\nconst App = ({ size = 3 }) => {\n  return (\n    <div className={styles.app}>\n      <h1>Welcome to Tic Tac Toe!</h1>\n      <Board size={size} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}